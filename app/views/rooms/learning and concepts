1. Rails' DateTime tries to detect the formatting automatically. It will detect the following formats: mm/dd/yy or dd-mm-yy or yyyy-mm-dd or yyyy/mm/dd. You could monkey-patch DateTime.parse, but I would rather move this issue to the View of your application.

I always recommend to use yyyy-mm-dd [hh:mm:ss] as a string representation for a date. Check the documentation of your DatePicker if it supports multiple date-formats.

The jQuery date-picker for example has this covered with dateFormat (for the data that is sent to the server, set this to yyyy-mm-dd) as well as altFormat (for the input the user sees, set this to dd/mm/yyyy).


2. Add a file called rails_defaults.rb to config\initializers directory; with following lines:

Date::DATE_FORMATS[:default] = '%d/%m/%Y'
Time::DATE_FORMATS[:default]= '%d/%m/%Y %H:%M:%S'



In your migrations, you can use the following types for columns
3. :string, :text, :integer, :float, :decimal, :datetime, :timestamp, :time, :date, :binary, :boolean

The attribute will be stored as a ActiveSupport::TimeWithZone, and you will have to format it when displaying it. You can use Time#strftime to do so.

your_attribute.strftime("%m/%d/%Y")   #=> "11/19/2007"

rails g model relative name email phone age gender date_of_birth:date relation user:references
https://apidock.com/rails/ActionView/Helpers/FormHelper/form_for

 Room.joins(:purchase).where('purchases.purchased_at IS NOT NULL')

 Railq query date difference