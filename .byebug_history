c
activity.trackable
activity
c
time_ago_in_words(conversation.messages.last.try(:created_at))
conversation.messages.last.try(:created_at)
c
conversation.messages.last.try(:created_at)
(conversation.messages.last.try(:created_at)
conversation.messages.last
conversation.messages
c
@conversations.map(&:messages).count
@conversations.map(&:messages)
@conversations.map(&:id)
@conversations.map(:id)
@conversations.map(:&id)
@conversations.map(:&message)
@conversations.map(:&messages)
@conversations.first.messages
@conversations.first.message
@conversations.first
@conversations
@conversations.message
@conversations.messages
@conversations
c
request.fullpath
c
request.fullpath
c
request.fullpath
c
request.fullpath
c
request.fullpath == "/sign-in"
request.fullpath
c
session[:previous_url]
request.fullpath
c
session[:previous_url]
request.fullpath
c
session[:previous_url]
request.fullpath
c
request.fullpath
session[:previous_url]
c
account_url
 session[:previous_url]
stored_location_for(resource)
c
account_url
session[:previous_url]
stored_location_for(resource)
c
session[:previous_url]
request.fullpath
c
session[:previous_url]
request.fullpath
c
session[:previous_url]
request.fullpath
c
session[:previous_url]
 request.fullpath
c
session[:previous_url]
request.referrer
request.fullpath
c
request.fullpath
c
request.fullpath
c
request.referer
session[:previous_url]
params
request.fullpath
c
request.fullpath
c
request.fullpath
session[:previous_url]
c
request.referer
request.fullpath
c
request.fullpath
request.referer
c
request.referer
request.fullpath
c
request.fullpath
request.referer
c
request.referer
request.fullpath
c
request.fullpath
request.referer
c
request.referer
request.fullpath
c
request.fullpath
request.referer
c
request.referer
request.fullpath
c
request.fullpath
request.referer
c
request.referer
request.fullpath
c
request.fullpath
session["user_return_to"]
c
request.fullpath
c
request.fullpath
c
session.values
session.keys
c
 session["user_return_to"]
request.fullpath
c
request.fullpath
c
request.fullpath
session["user_return_to"]
c
session["user_return_to"]
request.fullpath
c
request.fullpath
session["user_return_to"]
c
session.keys
session.keuy
session.keus
stored_location_for(resource)
resource
c
@photos[0].image.url(:medium)
@photos[0].try(:image)
@photos
c
params[:booking]
c
Booking.first
object
c
@room.update_attributes!(room_params)
@room.update_attributes(room_params)
room_params
c
@room.conditions.map(&:id)
@room.conditions.map(&:id)}
*************************************************
-----------------------------------------------------------------------------------------------------------------
c
@room
c
object.object.kind_of? Friend
object.object.kind_of? Patient
object.object.kind_of? Patients
object.object.kind_of? Patient
object.object.kind_of? Patiend
object.kind_of? User
object.kind_of?User
object.kind_of? Patient
object
c
object.class
object.kind
object.kind_of?
object.kind_of?(User)
object.kind_of?(Patient)
object.object_name
object.methods
object.object
object.object.class == Patient
object.object.class.class
object.object.class
object.object.kclass
object.object.class
object.object.class.eql?('Patient')
object.object.class
object.object
object.class.methods
object.class
object
c
current_patient.gender.present?
current_patient.gender.nil?
current_patient.gender
c
@room
c
@room.nearbys(1)
@room.nearbys(10)
@room
c
@photos.present?
@photos
c
room.is_upgraded?
c
room.is_upgraded?
c
room.is_upgraded?
room
c
room.is_upgraded?
room
c
room
room.is_upgraded?
c
room.is_upgraded?
c
room.is_upgraded?
c
room.is_upgraded?
room
c
rooms
c
@user
current_user
@owner
c
@photos
c
account_url
resource
stored_location_for(resource)
c
account_url
stored_location_for(resource)
resource
c
current_user.rooms.present?
current_user.rooms
current_user.rooms.nil?
n
current_user.class.name
n
