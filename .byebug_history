c
object.object.kind_of? Friend
object.object.kind_of? Patient
object.object.kind_of? Patients
object.object.kind_of? Patient
object.object.kind_of? Patiend
object.kind_of? User
object.kind_of?User
object.kind_of? Patient
object
c
object.class
object.kind
object.kind_of?
object.kind_of?(User)
object.kind_of?(Patient)
object.object_name
object.methods
object.object
object.object.class == Patient
object.object.class.class
object.object.class
object.object.kclass
object.object.class
object.object.class.eql?('Patient')
object.object.class
object.object
object.class.methods
object.class
object
c
current_patient.gender.present?
current_patient.gender.nil?
current_patient.gender
c
@room
c
@room.nearbys(1)
@room.nearbys(10)
@room
c
@photos.present?
@photos
c
room.is_upgraded?
c
room.is_upgraded?
c
room.is_upgraded?
room
c
room.is_upgraded?
room
c
room
room.is_upgraded?
c
room.is_upgraded?
c
room.is_upgraded?
c
room.is_upgraded?
room
c
rooms
c
@user
current_user
@owner
c
@photos
c
account_url
resource
stored_location_for(resource)
c
account_url
stored_location_for(resource)
resource
c
current_user.rooms.present?
current_user.rooms
current_user.rooms.nil?
n
current_user.class.name
n
current_user.class.name
n
l
c
@room.user
current_user
c
flash.empty?
c
@room.errors.full_messages.join(',')
@room.errors.full_messages
@room.errors
@room.error
@room
exit
c
session[:previous_url]
user_signed_in?
c
account_url
 stored_location_for(resource)
c
cc
c
session[:previous_url]
n
c
account_url
stored_location_for(resource)
resource
c
@user
n
@user.persisted?
n
request.env["omniauth.auth"]
l
c
auth.extra.raw_info.gender
auth.info
auth.extra.raw_info
c
photo.image.url
photo.image
c
photo.image.url
photo.image
photo
c
@room.update!(room_params)
@room.update(room_params)
room_params
c
last_upgrade.purchased_at.to_date
( DateTime.now.to_date - last_upgrade.purchased_at.to_date).to_i < 31
last_upgrade.purchased_at.present?
purchases.last
c
 purchases.first
 purchases.last
purchases
c
( DateTime.now.to_date- last_upgrade.purchased_at.to_date).to_i
DateTime.now.to_date
last_upgrade.purchased_at.to_date
c
last_upgrade.purchased_at.present?
purchases.last
c
@room.purchase.build
@room.purchase
@room
c
v
c
@room.is_upgraded?
@room.is_upgraded
@owner
c
params
c
params
c
params
c
resource.errors.full_messages
resource.errors
resource.valid?
resource
c
params
c
params
c
session.keys
c
session[:previous_url]
c
session[:previous_url]
c
session[:previous_url]
l
session
c
f.object.class.namec
f.object.class.name
f.object.class
f.object.
f.object.methods
f.object.method
f.object.type
f.object.kclass
f.object.class.type
f.object.class
f.object.class.eql?('Booking')
f.object
c
f.object
c
f.object.class.eql?("Booking")
f.object.class
f.object
f.methods
f
c
object
c
object
c
object
c
object
c
object
params[:refer].eql? "true"
c
params
c
user_booking
c
user_booking
!@owner
c
@owner
booked(current_user.id, @room.id)
c
booked(current_user.id, @room.id)
c
current_user.bookings.present?
current_user.bookings
current_user
c
current_user == @room.user
c
@rooms_address
@rooms_address.upgraded
@rooms_address
c
session[:loc_search]
c
devise_parameter_sanitizer.permit(:account_update, keys: [:fullname, :phone_number, :description, :email, :password, :relatives=>{}])
params
devise_parameter_sanitizer.permit(:account_update, keys: [:fullname, :phone_number, :description, :email, :password, :relatives=>[]])
devise_parameter_sanitizer.permit(:account_update, keys: [:fullname, :phone_number, :description, :email, :password])
devise_parameter_sanitizer.permit(:account_update, keys: [:fullname, :phone_number, :description, :email, :password, :relatives])
c
params
params.require(:user)
c
room
